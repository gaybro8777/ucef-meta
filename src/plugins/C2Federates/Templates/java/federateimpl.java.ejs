package <%= groupId %>.<%= classname.toLowerCase() %>;

<% if(publishedinteractiondata.length || subscribedinteractiondata.length || publishedobjectdata.length || subscribedobjectdata.length) { -%>
import <%= groupId %>.<%= classname.toLowerCase() %>.rti.*;
<% } -%>

import org.cpswt.config.FederateConfig;
import org.cpswt.config.FederateConfigParser;
<%if (subscribedobjectdata.length > 0) { -%>
import org.cpswt.hla.base.ObjectReflector;
import org.cpswt.hla.ObjectRoot;
<% } -%>
<% if (subscribedinteractiondata.length > 0) { -%>
import org.cpswt.hla.InteractionRoot;
<% } -%>
import org.cpswt.hla.base.AdvanceTimeRequest;

import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;

// Define the <%= classname %> type of federate for the federation.

public class <%= classname %> extends <%= classname %>Base {
    private final static Logger log = LogManager.getLogger();

    private double currentTime = 0;
<% if (publishedobjectdata.length > 0) { -%>

    ////////////////////////////////////////////////////////////////////////
    // TODO instantiate objects that must be sent every logical time step //
    ////////////////////////////////////////////////////////////////////////
<% publishedobjectdata.forEach(function(object_data){ -%>
    // <%=object_data.name%> v<%=object_data.name%> =
    //     new <%=object_data.name%>();
<% }); -%>
<% } -%>

    public <%= classname %>(FederateConfig params) throws Exception {
        super(params);
<% if (publishedobjectdata.length > 0) { -%>

        //////////////////////////////////////////////////////
        // TODO register object instances after super(args) //
        //////////////////////////////////////////////////////
<% publishedobjectdata.forEach(function(object_data){ -%>
        // v<%=object_data.name%>.registerObject(getLRC());
<% }); -%>
<% } -%>
    }
<% if (subscribedinteractiondata.length + subscribedobjectdata.length > 0) { -%>
<% var conditional = "if"; -%>

    private void checkReceivedSubscriptions() {
<% if (subscribedinteractiondata.length > 0) { -%>
<% conditional = "if"; -%>
        InteractionRoot interaction = null;
        while ((interaction = getNextInteractionNoWait()) != null) {
<% (subscribedinteractiondata.sort(function(a, b){return b.fullName.length-a.fullName.length})).forEach(function(interaction_data){ -%>
            <%= conditional %> (interaction instanceof <%= interaction_data.name %>) {
                handleInteractionClass((<%= interaction_data.name %>) interaction);
            }
<% conditional = "else if"; -%>
<% }); -%>
            else {
                log.debug("unhandled interaction: {}", interaction.getClassName());
            }
        }
<% } -%>
<%if (subscribedobjectdata.length > 0) { -%>
<% conditional = "if"; -%>

        ObjectReflector reflector = null;
        while ((reflector = getNextObjectReflectorNoWait()) != null) {
            reflector.reflect();
            ObjectRoot object = reflector.getObjectRoot();
<% (subscribedobjectdata.sort(function(a, b){return b.fullName.length-a.fullName.length})).forEach(function(object_data){ -%>
            <%= conditional %> (object instanceof <%= object_data.name %>) {
                handleObjectClass((<%= object_data.name %>) object);
            }
<% conditional = "else if"; -%>
<%}) -%>
            else {
                log.debug("unhandled object reflection: {}", object.getClassName());
            }
        }
<% } -%>
    }
<% } -%>

    private void execute() throws Exception {
        if(super.isLateJoiner()) {
            log.info("turning off time regulation (late joiner)");
            currentTime = super.getLBTS() - super.getLookAhead();
            super.disableTimeRegulation();
        }

        /////////////////////////////////////////////
        // TODO perform basic initialization below //
        /////////////////////////////////////////////

        AdvanceTimeRequest atr = new AdvanceTimeRequest(currentTime);
        putAdvanceTimeRequest(atr);

        if(!super.isLateJoiner()) {
            log.info("waiting on readyToPopulate...");
            readyToPopulate();
            log.info("...synchronized on readyToPopulate");
        }

        ///////////////////////////////////////////////////////////////////////
        // TODO perform initialization that depends on other federates below //
        ///////////////////////////////////////////////////////////////////////

        if(!super.isLateJoiner()) {
            log.info("waiting on readyToRun...");
            readyToRun();
            log.info("...synchronized on readyToRun");
        }

        startAdvanceTimeThread();
        log.info("started logical time progression");

        while (!exitCondition) {
            atr.requestSyncStart();
            enteredTimeGrantedState();
<% if (publishedinteractiondata.length > 0) { -%>

            ////////////////////////////////////////////////////////////
            // TODO send interactions that must be sent every logical //
            // time step below                                        //
            ////////////////////////////////////////////////////////////

            // Set the interaction's parameters.
            //
<% publishedinteractiondata.forEach(function(interaction_data){ -%>
            //    <%= interaction_data.name %> v<%= interaction_data.name %> = create_<%= interaction_data.name %>();
<% interaction_data.parameters.forEach(function(parameter) { -%>
            //    v<%= interaction_data.name %>.set_<%= parameter.name %>( < YOUR VALUE HERE > );
<% }) -%>
            //    v<%= interaction_data.name %>.sendInteraction(getLRC(), currentTime + getLookAhead());
<% }) -%>
<% } -%>
<% if (publishedobjectdata.length > 0) { -%>

            ////////////////////////////////////////////////////////////
            // TODO objects that must be sent every logical time step //
            ////////////////////////////////////////////////////////////
<% publishedobjectdata.forEach(function(object_data){ -%>
<% if (object_data.parameters.length > 0) { -%>
<% object_data.parameters.forEach(function(parameter) { -%>
            //    v<%= object_data.name %>.set_<%= parameter.name %>(<YOUR VALUE HERE >);
<% }) -%>
<% } -%>
            //    v<%= object_data.name %>.updateAttributeValues(getLRC(), currentTime + getLookAhead());
<% }) -%>
<% } -%>
<% if (subscribedinteractiondata.length + subscribedobjectdata.length > 0) { -%>

            checkReceivedSubscriptions();
<% } -%>

            ////////////////////////////////////////////////////////////////////
            // TODO break here if ready to resign and break out of while loop //
            ////////////////////////////////////////////////////////////////////

            if (!exitCondition) {
                currentTime += super.getStepSize();
                AdvanceTimeRequest newATR =
                    new AdvanceTimeRequest(currentTime);
                putAdvanceTimeRequest(newATR);
                atr.requestSyncEnd();
                atr = newATR;
            }
        }

        // call exitGracefully to shut down federate
        exitGracefully();

        //////////////////////////////////////////////////////////////////////
        // TODO Perform whatever cleanups are needed before exiting the app //
        //////////////////////////////////////////////////////////////////////
    }
<%/* allinteractiondata:createInteraction() */ -%>
<%subscribedinteractiondata.forEach(function(interaction_data){ -%>

    private void handleInteractionClass(<%= interaction_data.name %> interaction) {
        ///////////////////////////////////////////////////////////////
        // TODO implement how to handle reception of the interaction //
        ///////////////////////////////////////////////////////////////
    }
<%}); -%>
<%/* allobjectdata:createObject() */ -%>
<%subscribedobjectdata.forEach(function(object_data){ -%>

    private void handleObjectClass(<%= object_data.name %> object) {
        //////////////////////////////////////////////////////////
        // TODO implement how to handle reception of the object //
        //////////////////////////////////////////////////////////
    }
<%}); -%>

    public static void main(String[] args) {
        try {
            FederateConfigParser federateConfigParser =
                new FederateConfigParser();
            FederateConfig federateConfig =
                federateConfigParser.parseArgs(args, FederateConfig.class);
            <%= classname %> federate =
                new <%= classname %>(federateConfig);
            federate.execute();
            log.info("Done.");
            System.exit(0);
        }
        catch (Exception e) {
            log.error(e);
            System.exit(1);
        }
    }
}
