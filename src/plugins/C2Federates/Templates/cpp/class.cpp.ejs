<% /*class(isinteraction,simname,classname,parentclassname,hlaclassname,datamembers,alldatamembers,isc2winteractionroot) ::= <<*/ -%>
// This file was generated by the WebGME Federates Exporter plugin. Do not edit manually!

#include "rti/<%=classname%>.hpp"

<% /*classcommon(...)*/ -%>
<%- ejs.render(TEMPLATES["cpp/classcommon.cpp.ejs"], {
                isinteraction: isinteraction,
                classname: classname,
                parentclassname: parentclassname,
                hlaclassname: hlaclassname,
                datamembers: datamembers,
                alldatamembers: alldatamembers
}) -%>
<% if(isc2winteractionroot){ -%>

void C2WInteractionRoot::sendInteraction( RTI::RTIambassador *rti, double time ) {
        if ( get_sourceFed().empty() || get_originFed().empty() ) {
                throw C2WException( "C2WInteractionRoot::sendInteraction:  source and/or origin federate not specified." );
        }
        Super::sendInteraction( rti, time );
}

void C2WInteractionRoot::sendInteraction( RTI::RTIambassador *rti ) {
        if ( get_sourceFed().empty() || get_originFed().empty() ) {
                throw C2WException( "C2WInteractionRoot::sendInteraction:  source and/or origin federate not specified." );
        }
        Super::sendInteraction( rti );
}
<% } -%>
<% if(!isinteraction){ -%>
<% if(alldatamembers && alldatamembers.length > 0){ -%>

<%=classname%>::AttributeHandleValuePairSetSP <%=classname%>::createDatamemberHandleValuePairSet( bool force ) {
        AttributeHandleValuePairSetSP datamembers = AttributeHandleValuePairSetSP(RTI::AttributeSetFactory::create(<%=alldatamembers.length%>));
        std::string stringConversion;
        bool isPublished;

<% /*alldatamembers:{ d |<supplied_attribute(classname=classname,datamember=d)>}*/ -%>
<% alldatamembers.forEach(function(datamember){ -%>
        isPublished = (m_publishedAttributeNames.find("<%=datamember.name%>") != m_publishedAttributeNames.end());
        if (  isPublished && _<%=datamember.name%>.shouldBeUpdated( force )  ) {
                stringConversion = static_cast< std::string >(  TypeMedley( get_<%=datamember.name%>() )  );
                datamembers->add( get_<%=datamember.name%>_handle(), stringConversion.c_str(), stringConversion.size() );
                _<%=datamember.name%>.setHasBeenUpdated();
        }

<% }); -%>
        return datamembers;
}

boost::unordered_set< std::string > <%=classname%>::m_publishedAttributeNames;
<% } -%>
<% } -%>
